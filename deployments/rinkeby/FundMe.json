{
  "address": "0xa1520e08B79fE9ba913c00C6328E93c360FEd79d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_s_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundMe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x690c5449b0ac18952038d0199e367b8441a38696fb5b388eca4b1951c5b5f1eb",
  "receipt": {
    "to": null,
    "from": "0xe0BCB36371653b944223ED14C4441883b62400Fd",
    "contractAddress": "0xa1520e08B79fE9ba913c00C6328E93c360FEd79d",
    "transactionIndex": 18,
    "gasUsed": "1021565",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x994ea828a4465cd9cc3a45589780aff13bcd75340d98d7f691939b445d7e2e71",
    "transactionHash": "0x690c5449b0ac18952038d0199e367b8441a38696fb5b388eca4b1951c5b5f1eb",
    "logs": [],
    "blockNumber": 11173773,
    "cumulativeGasUsed": "6258694",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F"
  ],
  "numDeployments": 2,
  "solcInputHash": "befeb06baff0469dc570243b3d1feb9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_s_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Raiyan Mukhtar\",\"details\":\"This imlements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fundMe()\":{\"details\":\"This imlements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fundMe()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n * @author Raiyan Mukhtar\\n * @notice This contract is to demo a sample funding contract\\n * @dev This imlements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n    //s represent storage variable\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert();\\n        _;\\n    }\\n\\n    constructor(address _s_priceFeed) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(_s_priceFeed);\\n    }\\n\\n    // receive() external payable {\\n    //     fundMe();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fundMe();\\n    // }\\n\\n    /**\\n     *\\n     * @notice This function funds this contract\\n     * @dev This imlements price feeds as our library\\n     *\\n     */\\n    function fundMe() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    // function getVersion() public view returns (uint256) {\\n    //     return s_priceFeed.version();\\n    // }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xe0684a25fa3805efa5511054fe8d85ea5f884b5d3d4c6f1269bff7d8d321fa10\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface _priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // );\\r\\n        (, int256 answer, , , ) = _priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface _priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(_priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb79464fac0b54a418516698db74960d617cbf3c91e414261bb23f8f9cd786072\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012a0380380620012a083398181016040528101906200003791906200011f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c61111b620001856000396000818161022c0152818161044f015281816105d701526107a1015261111b6000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b6a324e014610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a53565b610199565b6040516100b49190610a99565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610ae0565b6101e2565b6040516100f19190610b1c565b60405180910390f35b61010261022a565b005b34801561011057600080fd5b5061011961043e565b6040516101269190610a99565b60405180910390f35b34801561013b57600080fd5b5061014461044b565b6040516101519190610b1c565b60405180910390f35b34801561016657600080fd5b5061016f610473565b60405161017c9190610b96565b60405180910390f35b61018d61049c565b005b6101976105d5565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600282815481106101f8576101f7610bb1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028257600080fd5b60005b60028054905081101561032e576000600282815481106102a8576102a7610bb1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032690610c0f565b915050610285565b50600067ffffffffffffffff81111561034a57610349610c58565b5b6040519080825280602002602001820160405280156103785781602001602082028036833780820191505090505b506002908051906020019061038e929190610949565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b590610cb8565b60006040518083038185875af1925050503d80600081146103f2576040519150601f19603f3d011682016040523d82523d6000602084013e6103f7565b606091505b505090508061043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043290610d2a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104d960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461086d90919063ffffffff16565b101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190610d96565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105699190610db6565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062d57600080fd5b600060028054806020026020016040519081016040528092919081815260200182805480156106b157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610667575b5050505050905060005b815181101561073c5760008282815181106106d9576106d8610bb1565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073490610c0f565b9150506106bb565b50600067ffffffffffffffff81111561075857610757610c58565b5b6040519080825280602002602001820160405280156107865781602001602082028036833780820191505090505b506002908051906020019061079c929190610949565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e390610cb8565b60006040518083038185875af1925050503d8060008114610820576040519150601f19603f3d011682016040523d82523d6000602084013e610825565b606091505b5050905080610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090610d2a565b60405180910390fd5b5050565b600080610879836108a9565b90506000670de0b6b3a764000085836108929190610e0c565b61089c9190610e95565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108f257600080fd5b505afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190610f53565b5050509150506402540be400816109419190610fce565b915050919050565b8280548282559060005260206000209081019282156109c2579160200282015b828111156109c15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610969565b5b5090506109cf91906109d3565b5090565b5b808211156109ec5760008160009055506001016109d4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a20826109f5565b9050919050565b610a3081610a15565b8114610a3b57600080fd5b50565b600081359050610a4d81610a27565b92915050565b600060208284031215610a6957610a686109f0565b5b6000610a7784828501610a3e565b91505092915050565b6000819050919050565b610a9381610a80565b82525050565b6000602082019050610aae6000830184610a8a565b92915050565b610abd81610a80565b8114610ac857600080fd5b50565b600081359050610ada81610ab4565b92915050565b600060208284031215610af657610af56109f0565b5b6000610b0484828501610acb565b91505092915050565b610b1681610a15565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b6000819050919050565b6000610b5c610b57610b52846109f5565b610b37565b6109f5565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1a82610a80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4d57610c4c610be0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ca2600083610c87565b9150610cad82610c92565b600082019050919050565b6000610cc382610c95565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d14600b83610ccd565b9150610d1f82610cde565b602082019050919050565b60006020820190508181036000830152610d4381610d07565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d80601b83610ccd565b9150610d8b82610d4a565b602082019050919050565b60006020820190508181036000830152610daf81610d73565b9050919050565b6000610dc182610a80565b9150610dcc83610a80565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0157610e00610be0565b5b828201905092915050565b6000610e1782610a80565b9150610e2283610a80565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5b57610e5a610be0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea082610a80565b9150610eab83610a80565b925082610ebb57610eba610e66565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee581610ec6565b8114610ef057600080fd5b50565b600081519050610f0281610edc565b92915050565b6000819050919050565b610f1b81610f08565b8114610f2657600080fd5b50565b600081519050610f3881610f12565b92915050565b600081519050610f4d81610ab4565b92915050565b600080600080600060a08688031215610f6f57610f6e6109f0565b5b6000610f7d88828901610ef3565b9550506020610f8e88828901610f29565b9450506040610f9f88828901610f3e565b9350506060610fb088828901610f3e565b9250506080610fc188828901610ef3565b9150509295509295909350565b6000610fd982610f08565b9150610fe483610f08565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102357611022610be0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110605761105f610be0565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109d5761109c610be0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110da576110d9610be0565b5b82820290509291505056fea264697066735822122000f670ccb55e992241cf8b44fe5719634a1cfa05ee2d189b9d47809db88b11a964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b6a324e014610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a53565b610199565b6040516100b49190610a99565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610ae0565b6101e2565b6040516100f19190610b1c565b60405180910390f35b61010261022a565b005b34801561011057600080fd5b5061011961043e565b6040516101269190610a99565b60405180910390f35b34801561013b57600080fd5b5061014461044b565b6040516101519190610b1c565b60405180910390f35b34801561016657600080fd5b5061016f610473565b60405161017c9190610b96565b60405180910390f35b61018d61049c565b005b6101976105d5565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600282815481106101f8576101f7610bb1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028257600080fd5b60005b60028054905081101561032e576000600282815481106102a8576102a7610bb1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032690610c0f565b915050610285565b50600067ffffffffffffffff81111561034a57610349610c58565b5b6040519080825280602002602001820160405280156103785781602001602082028036833780820191505090505b506002908051906020019061038e929190610949565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b590610cb8565b60006040518083038185875af1925050503d80600081146103f2576040519150601f19603f3d011682016040523d82523d6000602084013e6103f7565b606091505b505090508061043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043290610d2a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104d960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461086d90919063ffffffff16565b101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190610d96565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105699190610db6565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062d57600080fd5b600060028054806020026020016040519081016040528092919081815260200182805480156106b157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610667575b5050505050905060005b815181101561073c5760008282815181106106d9576106d8610bb1565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073490610c0f565b9150506106bb565b50600067ffffffffffffffff81111561075857610757610c58565b5b6040519080825280602002602001820160405280156107865781602001602082028036833780820191505090505b506002908051906020019061079c929190610949565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e390610cb8565b60006040518083038185875af1925050503d8060008114610820576040519150601f19603f3d011682016040523d82523d6000602084013e610825565b606091505b5050905080610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090610d2a565b60405180910390fd5b5050565b600080610879836108a9565b90506000670de0b6b3a764000085836108929190610e0c565b61089c9190610e95565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108f257600080fd5b505afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190610f53565b5050509150506402540be400816109419190610fce565b915050919050565b8280548282559060005260206000209081019282156109c2579160200282015b828111156109c15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610969565b5b5090506109cf91906109d3565b5090565b5b808211156109ec5760008160009055506001016109d4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a20826109f5565b9050919050565b610a3081610a15565b8114610a3b57600080fd5b50565b600081359050610a4d81610a27565b92915050565b600060208284031215610a6957610a686109f0565b5b6000610a7784828501610a3e565b91505092915050565b6000819050919050565b610a9381610a80565b82525050565b6000602082019050610aae6000830184610a8a565b92915050565b610abd81610a80565b8114610ac857600080fd5b50565b600081359050610ada81610ab4565b92915050565b600060208284031215610af657610af56109f0565b5b6000610b0484828501610acb565b91505092915050565b610b1681610a15565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b6000819050919050565b6000610b5c610b57610b52846109f5565b610b37565b6109f5565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1a82610a80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4d57610c4c610be0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ca2600083610c87565b9150610cad82610c92565b600082019050919050565b6000610cc382610c95565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d14600b83610ccd565b9150610d1f82610cde565b602082019050919050565b60006020820190508181036000830152610d4381610d07565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d80601b83610ccd565b9150610d8b82610d4a565b602082019050919050565b60006020820190508181036000830152610daf81610d73565b9050919050565b6000610dc182610a80565b9150610dcc83610a80565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0157610e00610be0565b5b828201905092915050565b6000610e1782610a80565b9150610e2283610a80565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5b57610e5a610be0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea082610a80565b9150610eab83610a80565b925082610ebb57610eba610e66565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee581610ec6565b8114610ef057600080fd5b50565b600081519050610f0281610edc565b92915050565b6000819050919050565b610f1b81610f08565b8114610f2657600080fd5b50565b600081519050610f3881610f12565b92915050565b600081519050610f4d81610ab4565b92915050565b600080600080600060a08688031215610f6f57610f6e6109f0565b5b6000610f7d88828901610ef3565b9550506020610f8e88828901610f29565b9450506040610f9f88828901610f3e565b9350506060610fb088828901610f3e565b9250506080610fc188828901610ef3565b9150509295509295909350565b6000610fd982610f08565b9150610fe483610f08565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102357611022610be0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110605761105f610be0565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109d5761109c610be0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110da576110d9610be0565b5b82820290509291505056fea264697066735822122000f670ccb55e992241cf8b44fe5719634a1cfa05ee2d189b9d47809db88b11a964736f6c63430008080033",
  "devdoc": {
    "author": "Raiyan Mukhtar",
    "details": "This imlements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fundMe()": {
        "details": "This imlements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fundMe()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}